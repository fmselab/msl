var boolean adaptation_required_a_fd
var boolean ff_slave_active
var boolean gf_slave_active

rule "StartLoop_MySmartHomeFDbis"
when
	System started
then
	start_a_fd.sendCommand(OFF)
	start_p_fd.sendCommand(OFF)
	start_m_gf.sendCommand(ON)
	start_e_gf.sendCommand(OFF)
	start_m_ff.sendCommand(ON)
	start_e_ff.sendCommand(OFF)
	ff_slave_active = false
	gf_slave_active = false
end

rule "Analyze_a_fd"
when
	Item start_a_fd received command ON
then
	sendCommand(start_a_fd, OFF)
	if(((Math::random * 100.0).intValue + 1) <= 50 ){
		adaptation_required_a_fd = true
	}
	else {
		adaptation_required_a_fd = false
	}
	if(adaptation_required_a_fd){
		sendCommand(start_p_fd, ON)
	}
	else{ //no adaptation 
		if (gf_slave_active) {
			gf_slave_active = false
			sendCommand(start_m_gf, ON)
		}

		if (ff_slave_active) {
			ff_slave_active = false
			sendCommand(start_m_ff, ON)
		}
	}
end

rule "Monitor_m_gf"
when
	Item start_m_gf received command ON
then
	sendCommand(start_m_gf, OFF)
	sendCommand(gf_slave_to_fd_master, ON)
end

rule "Monitor_m_ff"
when
	Item start_m_ff received command ON
then
	sendCommand(start_m_ff, OFF)
	sendCommand(ff_slave_to_fd_master, ON)
end

rule "Aggregator_m_gf_m_ff_a_fd"
when
	Item gf_slaveff_slave_to_fd_master received update ON
then
	if (gf_slave_to_fd_master.state == ON) 
		sendCommand(gf_slave_to_fd_master, OFF)
	if (ff_slave_to_fd_master.state == ON) 
		sendCommand(ff_slave_to_fd_master, OFF)
	sendCommand(start_a_fd, ON)
end

rule "Plan_p_fd"
when
	Item start_p_fd received command ON
then
	sendCommand(start_p_fd, OFF)
	sendCommand(start_e_gf, ON)
	sendCommand(start_e_ff, ON)
end

rule "Exec_e_gf"
when
	Item start_e_gf received command ON
then
	sendCommand(start_e_gf, OFF)
	gf_slave_active = false
	sendCommand(start_m_gf, ON)
end

rule "Monitor_m_gf"
when
	Item start_m_gf received command ON
then
	sendCommand(start_m_gf, OFF)
	ff_slave_active = true
	sendCommand(gf_slave_to_fd_master, ON)
	
end

rule "Monitor_m_ff"
when
	Item start_m_ff received command ON
then
	sendCommand(start_m_ff, OFF)
	ff_slave_active = true
	sendCommand(ff_slave_to_fd_master, ON)
end

rule "Aggregator_m_gf_m_ff_a_fd"
when
	Item gf_slaveff_slave_to_fd_master received update ON
then
	sendCommand(gf_slave_to_fd_master, OFF)
	sendCommand(ff_slave_to_fd_master, OFF)
	sendCommand(start_a_fd, ON)
end

rule "Plan_p_fd"
when
	Item start_p_fd received command ON
then
	sendCommand(start_p_fd, OFF)
	sendCommand(start_e_gf, ON)
	sendCommand(start_e_ff, ON)
end

rule "Exec_e_ff"
when
	Item start_e_ff received command ON
then
	sendCommand(start_e_ff, OFF)
	ff_slave_active = false
	sendCommand(start_m_ff, ON)
end

rule "Monitor_m_gf"
when
	Item start_m_gf received command ON
then
	sendCommand(start_m_gf, OFF)
	sendCommand(gf_slave_to_fd_master, ON)
end

rule "Monitor_m_ff"
when
	Item start_m_ff received command ON
then
	sendCommand(start_m_ff, OFF)
	sendCommand(ff_slave_to_fd_master, ON)
end

rule "Aggregator_m_gf_m_ff_a_fd"
when
	Item gf_slaveff_slave_to_fd_master received update ON
then
	sendCommand(gf_slave_to_fd_master, OFF)
	sendCommand(ff_slave_to_fd_master, OFF)
	sendCommand(start_a_fd, ON)
end

rule "Plan_p_fd"
when
	Item start_p_fd received command ON
then
	sendCommand(start_p_fd, OFF)
	sendCommand(start_e_gf, ON)
	sendCommand(start_e_ff, ON)
end

