/**
 * Generated by Xtext 2.13.0
 * 
 * This generator allows you to create a .dot file
 * containing a complete DOT code for obtaining a
 * graphical notation of you own MSL model.
 * 
 * @author: Emanuele Perico, Patrizia Scandurra
 * @version: 1.0
 * @date: 10th December 2019
 */
package org.xtext.msl.generator;

import com.google.common.base.Objects;
import java.util.ArrayList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.ExclusiveRange;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.xtext.msl.mSL.AbstractComponent;
import org.xtext.msl.mSL.AbstractGroup;
import org.xtext.msl.mSL.AbstractInteraction;
import org.xtext.msl.mSL.AbstractPattern;
import org.xtext.msl.mSL.AbstractSystem;
import org.xtext.msl.mSL.ComponentInstance;
import org.xtext.msl.mSL.ConcreteGroup;
import org.xtext.msl.mSL.ConcreteSystem;
import org.xtext.msl.mSL.Configuration;
import org.xtext.msl.mSL.GroupBinding;
import org.xtext.msl.mSL.Interaction;
import org.xtext.msl.mSL.Pattern;
import org.xtext.msl.mSL.Specification;
import org.xtext.msl.mSL.SystemBinding;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MSLGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource res, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(res.getContents());
    fsa.generateFile(this.fileName(res), this.toDot(((Specification) _head)));
  }
  
  /**
   * Generates the complete DOT code for
   * abstract/concrete pattern and configuration
   */
  private CharSequence toDot(final Specification it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("digraph G {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("node [shape=square]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("edge [arrowhead=vee]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("rankdir=LR");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ranksep=0.5");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("nodesep=0.5");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("compound=true");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("subgraph cluster0 {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("label=\"\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    {
      AbstractPattern _absPattern = it.getAbsPattern();
      boolean _tripleNotEquals = (_absPattern != null);
      if (_tripleNotEquals) {
        _builder.append("\t\t");
        CharSequence _dotAbsSubgraph = this.getDotAbsSubgraph(it.getAbsPattern());
        _builder.append(_dotAbsSubgraph, "\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    {
      EList<Pattern> _pattern = it.getPattern();
      boolean _tripleNotEquals_1 = (_pattern != null);
      if (_tripleNotEquals_1) {
        {
          EList<Pattern> _pattern_1 = it.getPattern();
          for(final Pattern concrPattern : _pattern_1) {
            _builder.append("\t\t");
            CharSequence _dotConcrSubgraph = this.getDotConcrSubgraph(concrPattern);
            _builder.append(_dotConcrSubgraph, "\t\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    {
      Configuration _configuration = it.getConfiguration();
      boolean _tripleNotEquals_2 = (_configuration != null);
      if (_tripleNotEquals_2) {
        _builder.append("\t\t");
        CharSequence _dotConfigSubgraph = this.getDotConfigSubgraph(it.getConfiguration());
        _builder.append(_dotConfigSubgraph, "\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * Generates the DOT code for an AbstractPattern
   */
  private CharSequence getDotAbsSubgraph(final AbstractPattern it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("subgraph cluster_abstract {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("label=\"");
    String _name = it.getName();
    _builder.append(_name, "\t");
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("style=dashed");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("node [style=dashed]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("edge [style=dashed]");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      EList<AbstractSystem> _managedSystems = it.getManagedSystems();
      boolean _tripleNotEquals = (_managedSystems != null);
      if (_tripleNotEquals) {
        {
          EList<AbstractSystem> _managedSystems_1 = it.getManagedSystems();
          for(final AbstractSystem managedSys : _managedSystems_1) {
            _builder.append("\t");
            CharSequence _dotAbsSystems = this.getDotAbsSystems(managedSys);
            _builder.append(_dotAbsSystems, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      EList<AbstractGroup> _abstractGroups = it.getAbstractGroups();
      boolean _tripleNotEquals_1 = (_abstractGroups != null);
      if (_tripleNotEquals_1) {
        {
          EList<AbstractGroup> _abstractGroups_1 = it.getAbstractGroups();
          for(final AbstractGroup absGroups : _abstractGroups_1) {
            _builder.append("\t");
            CharSequence _dotAbsGroups = this.getDotAbsGroups(absGroups);
            _builder.append(_dotAbsGroups, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      EList<AbstractInteraction> _interactions = it.getInteractions();
      boolean _tripleNotEquals_2 = (_interactions != null);
      if (_tripleNotEquals_2) {
        {
          EList<AbstractInteraction> _interactions_1 = it.getInteractions();
          for(final AbstractInteraction absInteraction : _interactions_1) {
            _builder.append("\t");
            CharSequence _dotAbsInteractions = this.getDotAbsInteractions(absInteraction);
            _builder.append(_dotAbsInteractions, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * Generates the DOT code for an AbstractSystem
   */
  private CharSequence getDotAbsSystems(final AbstractSystem it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("AbsSys [shape=rectangle style=filled width=2 label=\"");
    String _name = it.getName();
    _builder.append(_name);
    _builder.append("\"]");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  /**
   * To distinguish the same type of component contained
   * in two different groups, the node ID is
   * created as follows: grpName_componentName.
   * For example: grp1_M and grp2_M.
   */
  private CharSequence getDotAbsGroups(final AbstractGroup it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("subgraph cluster_");
    String _name = it.getName();
    _builder.append(_name);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("label=\"");
    String _name_1 = it.getName();
    _builder.append(_name_1, "\t");
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("style=\"rounded, dashed\"");
    _builder.newLine();
    {
      EList<AbstractComponent> _components = it.getComponents();
      boolean _tripleNotEquals = (_components != null);
      if (_tripleNotEquals) {
        {
          EList<AbstractComponent> _components_1 = it.getComponents();
          for(final AbstractComponent absComponents : _components_1) {
            _builder.append("\t");
            String _name_2 = it.getName();
            String _plus = (_name_2 + "_");
            CharSequence _dotAbsComponents = this.getDotAbsComponents(absComponents);
            String _plus_1 = (_plus + _dotAbsComponents);
            _builder.append(_plus_1, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * Generates the DOT code for an AbstractComponent
   */
  private CharSequence getDotAbsComponents(final AbstractComponent it) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = it.getName();
    _builder.append(_name);
    _builder.append(" [label=\"");
    String _name_1 = it.getName();
    _builder.append(_name_1);
    _builder.append("\"]");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  /**
   * First IF Statement: two cases -same or different AbstractGroup-, only
   * 					   adds attribute CONSTRAINT for better visualization
   * Second IF Statement: adding an edge between ManagedSystem and M component.
   * Third IF Statement: addition of a "false" interaction between M and
   * 					   E just for the layout (specially in the Master-Slave case).
   * 					   This is set to invisible because there is no actual
   * 					   interaction between component M and E.
   */
  private CharSequence getDotAbsInteractions(final AbstractInteraction it) {
    StringConcatenation _builder = new StringConcatenation();
    final AbstractComponent absCompStart = it.getStart().getType();
    _builder.newLineIfNotEmpty();
    EObject _eContainer = absCompStart.eContainer();
    final AbstractGroup absGrpStart = ((AbstractGroup) _eContainer);
    _builder.newLineIfNotEmpty();
    final AbstractComponent absCompEnd = it.getEnd().getType();
    _builder.newLineIfNotEmpty();
    EObject _eContainer_1 = absCompEnd.eContainer();
    final AbstractGroup absGrpEnd = ((AbstractGroup) _eContainer_1);
    _builder.newLineIfNotEmpty();
    String _name = absGrpStart.getName();
    String _plus = (_name + "_");
    String _name_1 = absCompStart.getName();
    String _plus_1 = (_plus + _name_1);
    _builder.append(_plus_1);
    _builder.append(" -> ");
    String _name_2 = absGrpEnd.getName();
    String _plus_2 = (_name_2 + "_");
    String _name_3 = absCompEnd.getName();
    String _plus_3 = (_plus_2 + _name_3);
    _builder.append(_plus_3);
    _builder.newLineIfNotEmpty();
    {
      boolean _equals = Objects.equal(absGrpStart, absGrpEnd);
      if (_equals) {
        _builder.append("[headlabel=\"");
        String _high = it.getHigh();
        _builder.append(_high);
        _builder.append("\" taillabel=\"");
        String _low = it.getLow();
        _builder.append(_low);
        _builder.append("\" labelfontcolor=blue]");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("[headlabel=\"");
        String _high_1 = it.getHigh();
        _builder.append(_high_1);
        _builder.append("\" taillabel=\"");
        String _low_1 = it.getLow();
        _builder.append(_low_1);
        _builder.append("\" labelfontcolor=blue constraint=false]");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _name_4 = absCompStart.getName();
      boolean _equals_1 = Objects.equal(_name_4, "M");
      if (_equals_1) {
        _builder.append("AbsSys -> ");
        String _name_5 = absGrpStart.getName();
        String _plus_4 = (_name_5 + "_");
        String _name_6 = absCompStart.getName();
        String _plus_5 = (_plus_4 + _name_6);
        _builder.append(_plus_5);
        _builder.newLineIfNotEmpty();
        _builder.append("[arrowhead=box lhead=cluster_");
        String _name_7 = absGrpStart.getName();
        _builder.append(_name_7);
        _builder.append(" constraint=false]");
        _builder.newLineIfNotEmpty();
      } else {
        String _name_8 = absCompEnd.getName();
        boolean _equals_2 = Objects.equal(_name_8, "M");
        if (_equals_2) {
          _builder.append("AbsSys -> ");
          String _name_9 = absGrpEnd.getName();
          String _plus_6 = (_name_9 + "_");
          String _name_10 = absCompEnd.getName();
          String _plus_7 = (_plus_6 + _name_10);
          _builder.append(_plus_7);
          _builder.newLineIfNotEmpty();
          _builder.append("[arrowhead=box lhead=cluster_");
          String _name_11 = absGrpEnd.getName();
          _builder.append(_name_11);
          _builder.append(" constraint=false]");
          _builder.newLineIfNotEmpty();
        }
      }
    }
    {
      String _name_12 = absCompStart.getName();
      boolean _equals_3 = Objects.equal(_name_12, "M");
      if (_equals_3) {
        String _name_13 = absGrpStart.getName();
        String _plus_8 = (_name_13 + "_M");
        _builder.append(_plus_8);
        _builder.append(" -> ");
        String _name_14 = absGrpStart.getName();
        String _plus_9 = (_name_14 + "_E");
        _builder.append(_plus_9);
        _builder.append(" [style=invis]");
        _builder.newLineIfNotEmpty();
      } else {
        String _name_15 = absCompEnd.getName();
        boolean _equals_4 = Objects.equal(_name_15, "M");
        if (_equals_4) {
          String _name_16 = absGrpEnd.getName();
          String _plus_10 = (_name_16 + "_M");
          _builder.append(_plus_10);
          _builder.append(" -> ");
          String _name_17 = absGrpEnd.getName();
          String _plus_11 = (_name_17 + "_E");
          _builder.append(_plus_11);
          _builder.append(" [style=invis]");
          _builder.newLineIfNotEmpty();
        }
      }
    }
    return _builder;
  }
  
  /**
   * Second IF Statement: generates the DOT code for a System inside a Concrete Pattern.
   * 						There will be a node containing the name of the Concrete System
   * 						and its Abstract System as label of that node.
   */
  private CharSequence getDotConcrSubgraph(final Pattern it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("subgraph cluster_concrete {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("label=\"");
    String _name = it.getName();
    _builder.append(_name, "\t");
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    {
      EList<GroupBinding> _groups = it.getGroups();
      boolean _tripleNotEquals = (_groups != null);
      if (_tripleNotEquals) {
        {
          EList<GroupBinding> _groups_1 = it.getGroups();
          for(final GroupBinding concrGroups : _groups_1) {
            _builder.append("\t");
            CharSequence _dotConcrGroups = this.getDotConcrGroups(concrGroups);
            _builder.append(_dotConcrGroups, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      EList<SystemBinding> _managedSystems = it.getManagedSystems();
      boolean _tripleNotEquals_1 = (_managedSystems != null);
      if (_tripleNotEquals_1) {
        _builder.append("\t");
        _builder.append("ConcrSys [shape=record style=filled width=2 ");
        CharSequence _dotConcrSysLabel = this.getDotConcrSysLabel(it);
        _builder.append(_dotConcrSysLabel, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * Example:
   * PatternSysName1::AbsSysName1 PatternSysName2::AbsSysName2.
   * It is necessary to have two FOR loops in one line in order
   * to obtain a correct label for the Concrete System.
   */
  private CharSequence getDotConcrSysLabel(final Pattern it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("label=");
    String _concrSysLabelValue = this.concrSysLabelValue(it);
    _builder.append(_concrSysLabelValue);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  private String concrSysLabelValue(final Pattern it) {
    final SystemBinding first = it.getManagedSystems().get(0);
    final String firstName = first.getName();
    final AbstractSystem firstBind = first.getAbsSys();
    final String firstBindName = firstBind.getName();
    ArrayList<String> sysNames = CollectionLiterals.<String>newArrayList();
    ArrayList<String> absSysNames = CollectionLiterals.<String>newArrayList();
    String fullLabelValue = "";
    int _size = it.getManagedSystems().size();
    boolean _equals = (_size == 1);
    if (_equals) {
      fullLabelValue = (((("\"" + firstName) + "::") + firstBindName) + "\"]");
    } else {
      int _size_1 = it.getManagedSystems().size();
      boolean _greaterThan = (_size_1 > 1);
      if (_greaterThan) {
        int _size_2 = it.getManagedSystems().size();
        ExclusiveRange _doubleDotLessThan = new ExclusiveRange(1, _size_2, true);
        for (final Integer i : _doubleDotLessThan) {
          {
            SystemBinding sysBind = it.getManagedSystems().get((i).intValue());
            sysNames.add(sysBind.getName());
            absSysNames.add(sysBind.getAbsSys().getName());
          }
        }
        fullLabelValue = ((("\"" + firstName) + "::") + firstBindName);
        for (final String sysName : sysNames) {
          for (final String absSysName : absSysNames) {
            String _fullLabelValue = fullLabelValue;
            fullLabelValue = (_fullLabelValue + ((("| " + sysName) + "::") + absSysName));
          }
        }
        String _fullLabelValue_1 = fullLabelValue;
        fullLabelValue = (_fullLabelValue_1 + "\"]");
      }
    }
    return fullLabelValue;
  }
  
  /**
   * Example:
   * grp1 [... label="grp1:absGrp1"]
   */
  private CharSequence getDotConcrGroups(final GroupBinding it) {
    StringConcatenation _builder = new StringConcatenation();
    final String absGrpName = it.getAbsGroup().getName();
    _builder.newLineIfNotEmpty();
    String _name = it.getName();
    _builder.append(_name);
    _builder.append(" [shape=rectangle style=rounded width=2 label=\"");
    String _name_1 = it.getName();
    _builder.append(_name_1);
    _builder.append("::");
    _builder.append(absGrpName);
    _builder.append("\"]");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  /**
   * Generates the DOT code for a Configuration
   */
  private CharSequence getDotConfigSubgraph(final Configuration it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("subgraph cluster_model {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("label=\"");
    String _name = it.getName();
    _builder.append(_name, "\t");
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("edge [color=blue]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("color=blue");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      EList<ConcreteSystem> _concreteSystems = it.getConcreteSystems();
      boolean _tripleNotEquals = (_concreteSystems != null);
      if (_tripleNotEquals) {
        _builder.append("\t");
        _builder.append("ConfigSys [shape=record style=filled width=2 ");
        CharSequence _dotConfigSysLabel = this.getDotConfigSysLabel(it);
        _builder.append(_dotConfigSysLabel, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      EList<ConcreteGroup> _concreteGroups = it.getConcreteGroups();
      boolean _tripleNotEquals_1 = (_concreteGroups != null);
      if (_tripleNotEquals_1) {
        {
          EList<ConcreteGroup> _concreteGroups_1 = it.getConcreteGroups();
          for(final ConcreteGroup concrGrp : _concreteGroups_1) {
            _builder.append("\t");
            CharSequence _dotConfigGroups = this.getDotConfigGroups(concrGrp);
            _builder.append(_dotConfigGroups, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      EList<Interaction> _concreteInteractions = it.getConcreteInteractions();
      boolean _tripleNotEquals_2 = (_concreteInteractions != null);
      if (_tripleNotEquals_2) {
        {
          EList<Interaction> _concreteInteractions_1 = it.getConcreteInteractions();
          for(final Interaction concrIntr : _concreteInteractions_1) {
            _builder.append("\t");
            CharSequence _dotConfigInteractions = this.getDotConfigInteractions(concrIntr);
            _builder.append(_dotConfigInteractions, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * It is necessary to have two FOR loops in one line to obtain a
   * correct DOT line of code. Otherwise this will take to a
   * multiline label and DOT won't recognize it.
   */
  private CharSequence getDotConfigSysLabel(final Configuration it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("label=");
    String _configSysLabelValue = this.configSysLabelValue(it);
    _builder.append(_configSysLabelValue);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  private String configSysLabelValue(final Configuration it) {
    final ConcreteSystem first = it.getConcreteSystems().get(0);
    final String firstName = first.getName();
    final SystemBinding firstBind = first.getBindings().get(0);
    final String firstBindName = firstBind.getName();
    ArrayList<String> concrSysNames = CollectionLiterals.<String>newArrayList();
    ArrayList<String> concrSysBindNames = CollectionLiterals.<String>newArrayList();
    String fullLabelValue = "";
    int _size = it.getConcreteSystems().size();
    boolean _equals = (_size == 1);
    if (_equals) {
      fullLabelValue = (((("\"" + firstName) + "::") + firstBindName) + "\"]");
    } else {
      int _size_1 = it.getConcreteSystems().size();
      boolean _greaterThan = (_size_1 > 1);
      if (_greaterThan) {
        int _size_2 = it.getConcreteSystems().size();
        ExclusiveRange _doubleDotLessThan = new ExclusiveRange(1, _size_2, true);
        for (final Integer i : _doubleDotLessThan) {
          {
            concrSysNames.add(it.getConcreteSystems().get((i).intValue()).getName());
            EList<SystemBinding> _bindings = it.getConcreteSystems().get((i).intValue()).getBindings();
            for (final SystemBinding sysBind : _bindings) {
              concrSysBindNames.add(sysBind.getName());
            }
          }
        }
        fullLabelValue = ((("\"" + firstName) + "::") + firstBindName);
        for (final String bindName : concrSysBindNames) {
          for (final String concrName : concrSysNames) {
            String _fullLabelValue = fullLabelValue;
            fullLabelValue = (_fullLabelValue + ((("| " + concrName) + "::") + bindName));
          }
        }
        String _fullLabelValue_1 = fullLabelValue;
        fullLabelValue = (_fullLabelValue_1 + "\"]");
      }
    }
    return fullLabelValue;
  }
  
  /**
   * Generates the DOT code for a Group in Configuration
   */
  private CharSequence getDotConfigGroups(final ConcreteGroup it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("subgraph cluster_");
    String _name = it.getName();
    _builder.append(_name);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("label=\"");
    String _name_1 = it.getName();
    _builder.append(_name_1, "\t");
    _builder.append("::");
    {
      EList<GroupBinding> _abstractGroups = it.getAbstractGroups();
      for(final GroupBinding grpBind : _abstractGroups) {
        String _name_2 = grpBind.getName();
        _builder.append(_name_2, "\t");
      }
    }
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("node [color=blue]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("color=blue");
    _builder.newLine();
    {
      EList<ComponentInstance> _components = it.getComponents();
      boolean _tripleNotEquals = (_components != null);
      if (_tripleNotEquals) {
        {
          EList<ComponentInstance> _components_1 = it.getComponents();
          for(final ComponentInstance configComp : _components_1) {
            _builder.append("\t");
            String _name_3 = it.getName();
            String _plus = (_name_3 + "_");
            CharSequence _dotConfigComponents = this.getDotConfigComponents(configComp);
            String _plus_1 = (_plus + _dotConfigComponents);
            _builder.append(_plus_1, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * Example:
   * m_ff [label="m_ff:M"]
   */
  private CharSequence getDotConfigComponents(final ComponentInstance it) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = it.getName();
    _builder.append(_name);
    _builder.append(" [label=\"");
    String _name_1 = it.getName();
    _builder.append(_name_1);
    _builder.append("::");
    String _type = it.getType();
    _builder.append(_type);
    _builder.append("\"]");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  /**
   * First IF Statement: edge between nodes of different groups need
   * 					   attribute CONSTRAINT for better visualization.
   * Second IF Statement: adding an edge between ManagedSystem and M component.
   * Third IF Statement: addition of a "false" interaction between M and
   * 					   E for layout (specially in the Master-Slave case)
   * 					   This is set to invisible because there is no actual
   * 					   interaction between component M and E.
   */
  private CharSequence getDotConfigInteractions(final Interaction it) {
    StringConcatenation _builder = new StringConcatenation();
    final ComponentInstance compStart = it.getStart().getComponent();
    _builder.newLineIfNotEmpty();
    EObject _eContainer = compStart.eContainer();
    final ConcreteGroup grpStart = ((ConcreteGroup) _eContainer);
    _builder.newLineIfNotEmpty();
    final ComponentInstance compEnd = it.getEnd().getComponent();
    _builder.newLineIfNotEmpty();
    EObject _eContainer_1 = compEnd.eContainer();
    final ConcreteGroup grpEnd = ((ConcreteGroup) _eContainer_1);
    _builder.newLineIfNotEmpty();
    String _name = grpStart.getName();
    String _plus = (_name + "_");
    String _name_1 = compStart.getName();
    String _plus_1 = (_plus + _name_1);
    _builder.append(_plus_1);
    _builder.append(" -> ");
    String _name_2 = grpEnd.getName();
    String _plus_2 = (_name_2 + "_");
    String _name_3 = compEnd.getName();
    String _plus_3 = (_plus_2 + _name_3);
    _builder.append(_plus_3);
    _builder.newLineIfNotEmpty();
    {
      if ((grpStart != grpEnd)) {
        _builder.append("[constraint=false]");
        _builder.newLine();
      }
    }
    {
      String _type = compStart.getType();
      boolean _equals = Objects.equal(_type, "M");
      if (_equals) {
        _builder.append("ConfigSys -> ");
        String _name_4 = grpStart.getName();
        String _plus_4 = (_name_4 + "_");
        String _name_5 = compStart.getName();
        String _plus_5 = (_plus_4 + _name_5);
        _builder.append(_plus_5);
        _builder.newLineIfNotEmpty();
        _builder.append("[arrowhead=box lhead=cluster_");
        String _name_6 = grpStart.getName();
        _builder.append(_name_6);
        _builder.append(" constraint=false]");
        _builder.newLineIfNotEmpty();
      } else {
        String _type_1 = compEnd.getType();
        boolean _equals_1 = Objects.equal(_type_1, "M");
        if (_equals_1) {
          _builder.append("ConfigSys -> ");
          String _name_7 = grpEnd.getName();
          String _plus_6 = (_name_7 + "_");
          String _name_8 = compEnd.getName();
          String _plus_7 = (_plus_6 + _name_8);
          _builder.append(_plus_7);
          _builder.newLineIfNotEmpty();
          _builder.append("[arrowhead=box lhead=cluster_");
          String _name_9 = grpEnd.getName();
          _builder.append(_name_9);
          _builder.append(" constraint=false]");
          _builder.newLineIfNotEmpty();
        }
      }
    }
    {
      String _type_2 = compStart.getType();
      boolean _equals_2 = Objects.equal(_type_2, "M");
      if (_equals_2) {
        String _name_10 = grpStart.getName();
        String _plus_8 = (_name_10 + "_");
        String _name_11 = compStart.getName();
        String _plus_9 = (_plus_8 + _name_11);
        _builder.append(_plus_9);
        _builder.append(" -> ");
        String _name_12 = grpStart.getName();
        String _plus_10 = (_name_12 + "_");
        String _replace = compStart.getName().replace("m", "e");
        String _plus_11 = (_plus_10 + _replace);
        _builder.append(_plus_11);
        _builder.append(" [style=invis]");
        _builder.newLineIfNotEmpty();
      } else {
        String _type_3 = compEnd.getType();
        boolean _equals_3 = Objects.equal(_type_3, "M");
        if (_equals_3) {
          String _name_13 = grpEnd.getName();
          String _plus_12 = (_name_13 + "_");
          String _name_14 = compEnd.getName();
          String _plus_13 = (_plus_12 + _name_14);
          _builder.append(_plus_13);
          _builder.append(" -> ");
          String _name_15 = grpEnd.getName();
          String _plus_14 = (_name_15 + "_");
          String _replace_1 = compStart.getName().replace("m", "e");
          String _plus_15 = (_plus_14 + _replace_1);
          _builder.append(_plus_15);
          _builder.append(" [style=invis]");
          _builder.newLineIfNotEmpty();
        }
      }
    }
    return _builder;
  }
  
  /**
   * Example: if Resource file is "name.msl", this method will create
   * a new file named "name.dot" containing all the DOT code.
   */
  private String fileName(final Resource res) {
    return res.getURI().lastSegment().replace("msl", "dot");
  }
}
