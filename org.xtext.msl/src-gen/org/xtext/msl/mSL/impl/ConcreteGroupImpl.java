/**
 * generated by Xtext 2.12.0
 */
package org.xtext.msl.mSL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.msl.mSL.ComponentInstance;
import org.xtext.msl.mSL.ConcreteGroup;
import org.xtext.msl.mSL.ConcreteSystem;
import org.xtext.msl.mSL.GroupBinding;
import org.xtext.msl.mSL.MSLPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Concrete Group</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.msl.mSL.impl.ConcreteGroupImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.msl.mSL.impl.ConcreteGroupImpl#getAbstractGroups <em>Abstract Groups</em>}</li>
 *   <li>{@link org.xtext.msl.mSL.impl.ConcreteGroupImpl#getManSys <em>Man Sys</em>}</li>
 *   <li>{@link org.xtext.msl.mSL.impl.ConcreteGroupImpl#getManGrp <em>Man Grp</em>}</li>
 *   <li>{@link org.xtext.msl.mSL.impl.ConcreteGroupImpl#getComponents <em>Components</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConcreteGroupImpl extends MinimalEObjectImpl.Container implements ConcreteGroup
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getAbstractGroups() <em>Abstract Groups</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAbstractGroups()
   * @generated
   * @ordered
   */
  protected EList<GroupBinding> abstractGroups;

  /**
   * The cached value of the '{@link #getManSys() <em>Man Sys</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getManSys()
   * @generated
   * @ordered
   */
  protected ConcreteSystem manSys;

  /**
   * The cached value of the '{@link #getManGrp() <em>Man Grp</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getManGrp()
   * @generated
   * @ordered
   */
  protected EList<ConcreteGroup> manGrp;

  /**
   * The cached value of the '{@link #getComponents() <em>Components</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComponents()
   * @generated
   * @ordered
   */
  protected EList<ComponentInstance> components;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConcreteGroupImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MSLPackage.Literals.CONCRETE_GROUP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MSLPackage.CONCRETE_GROUP__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<GroupBinding> getAbstractGroups()
  {
    if (abstractGroups == null)
    {
      abstractGroups = new EObjectResolvingEList<GroupBinding>(GroupBinding.class, this, MSLPackage.CONCRETE_GROUP__ABSTRACT_GROUPS);
    }
    return abstractGroups;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConcreteSystem getManSys()
  {
    if (manSys != null && manSys.eIsProxy())
    {
      InternalEObject oldManSys = (InternalEObject)manSys;
      manSys = (ConcreteSystem)eResolveProxy(oldManSys);
      if (manSys != oldManSys)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MSLPackage.CONCRETE_GROUP__MAN_SYS, oldManSys, manSys));
      }
    }
    return manSys;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConcreteSystem basicGetManSys()
  {
    return manSys;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setManSys(ConcreteSystem newManSys)
  {
    ConcreteSystem oldManSys = manSys;
    manSys = newManSys;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MSLPackage.CONCRETE_GROUP__MAN_SYS, oldManSys, manSys));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ConcreteGroup> getManGrp()
  {
    if (manGrp == null)
    {
      manGrp = new EObjectResolvingEList<ConcreteGroup>(ConcreteGroup.class, this, MSLPackage.CONCRETE_GROUP__MAN_GRP);
    }
    return manGrp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ComponentInstance> getComponents()
  {
    if (components == null)
    {
      components = new EObjectContainmentEList<ComponentInstance>(ComponentInstance.class, this, MSLPackage.CONCRETE_GROUP__COMPONENTS);
    }
    return components;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MSLPackage.CONCRETE_GROUP__COMPONENTS:
        return ((InternalEList<?>)getComponents()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MSLPackage.CONCRETE_GROUP__NAME:
        return getName();
      case MSLPackage.CONCRETE_GROUP__ABSTRACT_GROUPS:
        return getAbstractGroups();
      case MSLPackage.CONCRETE_GROUP__MAN_SYS:
        if (resolve) return getManSys();
        return basicGetManSys();
      case MSLPackage.CONCRETE_GROUP__MAN_GRP:
        return getManGrp();
      case MSLPackage.CONCRETE_GROUP__COMPONENTS:
        return getComponents();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MSLPackage.CONCRETE_GROUP__NAME:
        setName((String)newValue);
        return;
      case MSLPackage.CONCRETE_GROUP__ABSTRACT_GROUPS:
        getAbstractGroups().clear();
        getAbstractGroups().addAll((Collection<? extends GroupBinding>)newValue);
        return;
      case MSLPackage.CONCRETE_GROUP__MAN_SYS:
        setManSys((ConcreteSystem)newValue);
        return;
      case MSLPackage.CONCRETE_GROUP__MAN_GRP:
        getManGrp().clear();
        getManGrp().addAll((Collection<? extends ConcreteGroup>)newValue);
        return;
      case MSLPackage.CONCRETE_GROUP__COMPONENTS:
        getComponents().clear();
        getComponents().addAll((Collection<? extends ComponentInstance>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MSLPackage.CONCRETE_GROUP__NAME:
        setName(NAME_EDEFAULT);
        return;
      case MSLPackage.CONCRETE_GROUP__ABSTRACT_GROUPS:
        getAbstractGroups().clear();
        return;
      case MSLPackage.CONCRETE_GROUP__MAN_SYS:
        setManSys((ConcreteSystem)null);
        return;
      case MSLPackage.CONCRETE_GROUP__MAN_GRP:
        getManGrp().clear();
        return;
      case MSLPackage.CONCRETE_GROUP__COMPONENTS:
        getComponents().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MSLPackage.CONCRETE_GROUP__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case MSLPackage.CONCRETE_GROUP__ABSTRACT_GROUPS:
        return abstractGroups != null && !abstractGroups.isEmpty();
      case MSLPackage.CONCRETE_GROUP__MAN_SYS:
        return manSys != null;
      case MSLPackage.CONCRETE_GROUP__MAN_GRP:
        return manGrp != null && !manGrp.isEmpty();
      case MSLPackage.CONCRETE_GROUP__COMPONENTS:
        return components != null && !components.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ConcreteGroupImpl
