/**
 * generated by Xtext 2.16.0
 */
package org.xtext.msl.mSL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.msl.mSL.AbstractComponent;
import org.xtext.msl.mSL.AbstractGroup;
import org.xtext.msl.mSL.AbstractSystem;
import org.xtext.msl.mSL.GroupDef;
import org.xtext.msl.mSL.MSLPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Abstract Group</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.msl.mSL.impl.AbstractGroupImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.msl.mSL.impl.AbstractGroupImpl#getManSys <em>Man Sys</em>}</li>
 *   <li>{@link org.xtext.msl.mSL.impl.AbstractGroupImpl#getManGrp <em>Man Grp</em>}</li>
 *   <li>{@link org.xtext.msl.mSL.impl.AbstractGroupImpl#getComponents <em>Components</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AbstractGroupImpl extends MinimalEObjectImpl.Container implements AbstractGroup
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getManSys() <em>Man Sys</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getManSys()
   * @generated
   * @ordered
   */
  protected EList<AbstractSystem> manSys;

  /**
   * The cached value of the '{@link #getManGrp() <em>Man Grp</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getManGrp()
   * @generated
   * @ordered
   */
  protected EList<GroupDef> manGrp;

  /**
   * The cached value of the '{@link #getComponents() <em>Components</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComponents()
   * @generated
   * @ordered
   */
  protected EList<AbstractComponent> components;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AbstractGroupImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MSLPackage.Literals.ABSTRACT_GROUP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MSLPackage.ABSTRACT_GROUP__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<AbstractSystem> getManSys()
  {
    if (manSys == null)
    {
      manSys = new EObjectResolvingEList<AbstractSystem>(AbstractSystem.class, this, MSLPackage.ABSTRACT_GROUP__MAN_SYS);
    }
    return manSys;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<GroupDef> getManGrp()
  {
    if (manGrp == null)
    {
      manGrp = new EObjectContainmentEList<GroupDef>(GroupDef.class, this, MSLPackage.ABSTRACT_GROUP__MAN_GRP);
    }
    return manGrp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<AbstractComponent> getComponents()
  {
    if (components == null)
    {
      components = new EObjectContainmentEList<AbstractComponent>(AbstractComponent.class, this, MSLPackage.ABSTRACT_GROUP__COMPONENTS);
    }
    return components;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MSLPackage.ABSTRACT_GROUP__MAN_GRP:
        return ((InternalEList<?>)getManGrp()).basicRemove(otherEnd, msgs);
      case MSLPackage.ABSTRACT_GROUP__COMPONENTS:
        return ((InternalEList<?>)getComponents()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MSLPackage.ABSTRACT_GROUP__NAME:
        return getName();
      case MSLPackage.ABSTRACT_GROUP__MAN_SYS:
        return getManSys();
      case MSLPackage.ABSTRACT_GROUP__MAN_GRP:
        return getManGrp();
      case MSLPackage.ABSTRACT_GROUP__COMPONENTS:
        return getComponents();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MSLPackage.ABSTRACT_GROUP__NAME:
        setName((String)newValue);
        return;
      case MSLPackage.ABSTRACT_GROUP__MAN_SYS:
        getManSys().clear();
        getManSys().addAll((Collection<? extends AbstractSystem>)newValue);
        return;
      case MSLPackage.ABSTRACT_GROUP__MAN_GRP:
        getManGrp().clear();
        getManGrp().addAll((Collection<? extends GroupDef>)newValue);
        return;
      case MSLPackage.ABSTRACT_GROUP__COMPONENTS:
        getComponents().clear();
        getComponents().addAll((Collection<? extends AbstractComponent>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MSLPackage.ABSTRACT_GROUP__NAME:
        setName(NAME_EDEFAULT);
        return;
      case MSLPackage.ABSTRACT_GROUP__MAN_SYS:
        getManSys().clear();
        return;
      case MSLPackage.ABSTRACT_GROUP__MAN_GRP:
        getManGrp().clear();
        return;
      case MSLPackage.ABSTRACT_GROUP__COMPONENTS:
        getComponents().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MSLPackage.ABSTRACT_GROUP__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case MSLPackage.ABSTRACT_GROUP__MAN_SYS:
        return manSys != null && !manSys.isEmpty();
      case MSLPackage.ABSTRACT_GROUP__MAN_GRP:
        return manGrp != null && !manGrp.isEmpty();
      case MSLPackage.ABSTRACT_GROUP__COMPONENTS:
        return components != null && !components.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //AbstractGroupImpl
