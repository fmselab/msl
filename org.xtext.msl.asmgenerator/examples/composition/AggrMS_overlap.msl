//Example of composition: two different patterns are instantiated once in the same 
//design with role overlappings.

import AggregateMAPE 
import MasterSlaveMAPE

concrete pattern AggrMAPE concretizationOf AggregateMAPE {
	system SysAggr : AggregateMAPE.Sys
    group MainAggr: AggregateMAPE.Main
    group IntAggr: AggregateMAPE.Interface
}

concrete pattern MSMAPE concretizationOf MasterSlaveMAPE {
	system SysMS : MasterSlaveMAPE.Sys
    group MasterMS: MasterSlaveMAPE.Master
    group SlaveMS: MasterSlaveMAPE.Slave
}


configuration AggrMS_overlap instanceOf AggrMAPE, MSMAPE {
    s0: AggrMAPE.SysAggr, MSMAPE.SysMS //s0 plays two roles: in AggrMAPE and in MSMAPE
    s1: AggrMAPE.SysAggr
    
	mainAggr: AggrMAPE.MainAggr {
		components m_aggr:M, a_aggr:A, p_aggr:P, e_agrr:E 
	}
	
	masterMS : MSMAPE.MasterMS {
		components a_MS:A, p_MS:P
	}
	
	//int_slave0 plays two roles: the role of interface in AggrMAPE and 
	//of slave in MSMAPE
	int_slave0 : AggrMAPE.IntAggr, MSMAPE.SlaveMS  {
		managedSyS s0
		components m_is0:M , e_is0:E 
	}

    intAggr1 : AggrMAPE.IntAggr  {
		managedSyS s1
		components m_intAggr1:M , e_intAggr1:E 
	}
	
	mainAggr.m_aggr -> mainAggr.a_aggr
	mainAggr.a_aggr -> mainAggr.p_aggr
	mainAggr.p_aggr -> mainAggr.e_aggr
	int_slave0.m_is0 -> mainAggr.m_aggr
	intAggr1.m_intAggr1 -> mainAggr.m_aggr
	mainAggr.e_aggr -> int_slave0.e_is0
	mainAggr.e_aggr -> intAggr1.e_intAggr1
	masterMS.a_MS -> masterMS.p_MS
	int_slave0.m_is0 -> masterMS.a_MS
	masterMS.e_MS -> int_slave0.e_is0
	
}
//------End pattern application---------
