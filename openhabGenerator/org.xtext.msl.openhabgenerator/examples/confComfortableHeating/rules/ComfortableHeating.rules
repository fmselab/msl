var boolean adaptation_required_a_chm

rule "StartLoop_ComfortableHeating"
when
	System started
then
	start_a_chm.sendCommand(OFF)
	start_p_chm.sendCommand(OFF)
	start_m_hs0.sendCommand(ON)
	start_e_hs0.sendCommand(OFF)
	start_m_hs1.sendCommand(ON)
	start_e_hs1.sendCommand(OFF)
	adaptation_required_a_chm = true
end

rule "Analyze_a_chm"
when
	Item start_a_chm received command ON
then
	sendCommand(start_a_chm, OFF)
	if(((Math::random * 100.0).intValue + 1) <= 50 ){
		adaptation_required_a_chm = true
	}
	else {
		adaptation_required_a_chm = false
	}
	if(adaptation_required_a_chm){
		sendCommand(start_p_chm, ON)
	}
	else{
		sendCommand(start_m_hs0, ON)
		sendCommand(start_m_hs1, ON)
	}
end

rule "Exec_e_hs0"
when
	Item start_e_hs0 received command ON
then
	sendCommand(start_e_hs0, OFF)
	sendCommand(start_m_hs0, ON)
end

rule "Exec_e_hs1"
when
	Item start_e_hs1 received command ON
then
	sendCommand(start_e_hs1, OFF)
	sendCommand(start_m_hs1, ON)
end

rule "Monitor_m_hs0"
when
	Item start_m_hs0 received command ON
then
	sendCommand(start_m_hs0, OFF)
	sendCommand(hs0_to_chm, ON)
end

rule "Monitor_m_hs1"
when
	Item start_m_hs1 received command ON
then
	sendCommand(start_m_hs1, OFF)
	sendCommand(hs1_to_chm, ON)
end

rule "Aggregator_m_hs0_m_hs1_a_chm"
when
	Item hs0hs1_to_chm received update ON
then
	sendCommand(hs0_to_chm, OFF)
	sendCommand(hs1_to_chm, OFF)
	sendCommand(start_a_chm, ON)
end

rule "Plan_p_chm"
when
	Item start_p_chm received command ON
then
	sendCommand(start_p_chm, OFF)
	sendCommand(start_e_hs0, ON)
	sendCommand(start_e_hs1, ON)
end

