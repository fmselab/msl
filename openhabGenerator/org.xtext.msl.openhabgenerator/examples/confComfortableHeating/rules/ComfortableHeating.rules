var boolean adaptation_required_a_ch0
var boolean adaptation_required_a_ch1
var boolean adaptation_required_a_ch2

rule "StartLoop_ComfortableHeating"
when
	System started
then
	start_m_ch0.sendCommand(ON)
	start_a_ch0.sendCommand(OFF)
	start_p_ch0.sendCommand(OFF)
	start_e_ch0.sendCommand(OFF)
	start_m_ch1.sendCommand(ON)
	start_a_ch1.sendCommand(OFF)
	start_p_ch1.sendCommand(OFF)
	start_e_ch1.sendCommand(OFF)
	start_m_ch2.sendCommand(ON)
	start_a_ch2.sendCommand(OFF)
	start_p_ch2.sendCommand(OFF)
	start_e_ch2.sendCommand(OFF)
	adaptation_required_a_ch0 = true
	adaptation_required_a_ch1 = true
	adaptation_required_a_ch2 = true
end

rule "Monitor_m_ch0"
when
	Item start_m_ch0 received command ON
then
	sendCommand(start_m_ch0, OFF)
	sendCommand(start_a_ch0, ON)
end

rule "Analyze_a_ch0"
when
	Item start_a_ch0 received command ON
then
	sendCommand(start_a_ch0, OFF)
	if(((Math::random * 100.0).intValue + 1) <= 50 ){
		adaptation_required_a_ch0 = true
	}
	else {
		adaptation_required_a_ch0 = false
	}
	if(adaptation_required_a_ch0){
		sendCommand(start_p_ch0, ON)
	}
	else{
		sendCommand(start_m_ch1, ON)
		sendCommand(start_m_ch2, ON)
	}
end

rule "Plan_p_ch0"
when
	Item start_p_ch0 received command ON
then
	sendCommand(start_p_ch0, OFF)
	sendCommand(start_e_ch0, ON)
end

rule "Exec_e_ch0"
when
	Item start_e_ch0 received command ON
then
	sendCommand(start_e_ch0, OFF)
	sendCommand(start_m_ch0, ON)
end

rule "Monitor_m_ch1"
when
	Item start_m_ch1 received command ON
then
	sendCommand(start_m_ch1, OFF)
	sendCommand(start_a_ch1, ON)
end

rule "Analyze_a_ch1"
when
	Item start_a_ch1 received command ON
then
	sendCommand(start_a_ch1, OFF)
	if(((Math::random * 100.0).intValue + 1) <= 50 ){
		adaptation_required_a_ch1 = true
	}
	else {
		adaptation_required_a_ch1 = false
	}
	if(adaptation_required_a_ch1){
		sendCommand(start_p_ch1, ON)
	}
	else{
		sendCommand(start_m_ch0, ON)
		sendCommand(start_m_ch2, ON)
	}
end

rule "Plan_p_ch1"
when
	Item start_p_ch1 received command ON
then
	sendCommand(start_p_ch1, OFF)
	sendCommand(start_e_ch1, ON)
end

rule "Exec_e_ch1"
when
	Item start_e_ch1 received command ON
then
	sendCommand(start_e_ch1, OFF)
	sendCommand(start_m_ch1, ON)
end

rule "Monitor_m_ch2"
when
	Item start_m_ch2 received command ON
then
	sendCommand(start_m_ch2, OFF)
	sendCommand(start_a_ch2, ON)
end

rule "Analyze_a_ch2"
when
	Item start_a_ch2 received command ON
then
	sendCommand(start_a_ch2, OFF)
	if(((Math::random * 100.0).intValue + 1) <= 50 ){
		adaptation_required_a_ch2 = true
	}
	else {
		adaptation_required_a_ch2 = false
	}
	if(adaptation_required_a_ch2){
		sendCommand(start_p_ch2, ON)
	}
	else{
		sendCommand(start_m_ch0, ON)
		sendCommand(start_m_ch1, ON)
	}
end

rule "Plan_p_ch2"
when
	Item start_p_ch2 received command ON
then
	sendCommand(start_p_ch2, OFF)
	sendCommand(start_e_ch2, ON)
end

rule "Exec_e_ch2"
when
	Item start_e_ch2 received command ON
then
	sendCommand(start_e_ch2, OFF)
	sendCommand(start_m_ch2, ON)
end

rule "Monitor_m_ch1"
when
	Item start_m_ch1 received command ON
then
	sendCommand(start_m_ch1, OFF)
	sendCommand(ch1_to_ch0, ON)
end

rule "Monitor_m_ch2"
when
	Item start_m_ch2 received command ON
then
	sendCommand(start_m_ch2, OFF)
	sendCommand(ch2_to_ch0, ON)
end

rule "Aggregator_m_ch1_m_ch2_m_ch0"
when
	Item ch1ch2_to_ch0 received update ON
then
	sendCommand(ch1_to_ch0, OFF)
	sendCommand(ch2_to_ch0, OFF)
	sendCommand(start_m_ch0, ON)
end

rule "Monitor_m_ch0"
when
	Item start_m_ch0 received command ON
then
	sendCommand(start_m_ch0, OFF)
	sendCommand(start_m_ch1, ON)
	sendCommand(start_m_ch2, ON)
end

rule "Monitor_m_ch0"
when
	Item start_m_ch0 received command ON
then
	sendCommand(start_m_ch0, OFF)
	sendCommand(ch0_to_ch1, ON)
end

rule "Monitor_m_ch2"
when
	Item start_m_ch2 received command ON
then
	sendCommand(start_m_ch2, OFF)
	sendCommand(ch2_to_ch1, ON)
end

rule "Aggregator_m_ch0_m_ch2_m_ch1"
when
	Item ch0ch2_to_ch1 received update ON
then
	sendCommand(ch0_to_ch1, OFF)
	sendCommand(ch2_to_ch1, OFF)
	sendCommand(start_m_ch1, ON)
end

rule "Monitor_m_ch1"
when
	Item start_m_ch1 received command ON
then
	sendCommand(start_m_ch1, OFF)
	sendCommand(start_m_ch0, ON)
	sendCommand(start_m_ch2, ON)
end

rule "Monitor_m_ch0"
when
	Item start_m_ch0 received command ON
then
	sendCommand(start_m_ch0, OFF)
	sendCommand(ch0_to_ch2, ON)
end

rule "Monitor_m_ch1"
when
	Item start_m_ch1 received command ON
then
	sendCommand(start_m_ch1, OFF)
	sendCommand(ch1_to_ch2, ON)
end

rule "Aggregator_m_ch0_m_ch1_m_ch2"
when
	Item ch0ch1_to_ch2 received update ON
then
	sendCommand(ch0_to_ch2, OFF)
	sendCommand(ch1_to_ch2, OFF)
	sendCommand(start_m_ch2, ON)
end

rule "Monitor_m_ch2"
when
	Item start_m_ch2 received command ON
then
	sendCommand(start_m_ch2, OFF)
	sendCommand(start_m_ch0, ON)
	sendCommand(start_m_ch1, ON)
end

