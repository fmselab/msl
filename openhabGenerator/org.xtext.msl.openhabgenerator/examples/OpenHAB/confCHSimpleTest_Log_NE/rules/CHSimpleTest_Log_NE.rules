var boolean adaptation_required_a_ch

var Number counter_ch_CHSimpleTest_Log_NE

rule "StartLoop_CHSimpleTest_Log_NE"
when
    System started
then
    logInfo("CHSimpleTest_Log_NE.rules", "Initializing loops for CHSimpleTest_Log_NE.")

    logInfo("CHSimpleTest_Log_NE.rules", "Starting MAPE Loop for group (ch_CHSimpleTest_Log_NE).")
    counter_ch_CHSimpleTest_Log_NE = 0
    logInfo("CHSimpleTest_Log_NE.rules", "counter_ch_CHSimpleTest_Log_NE = " + counter_ch_CHSimpleTest_Log_NE + ".")

    adaptation_required_a_ch = false

    createTimer(now.plusSeconds(1)) [|
        start_m_ch_CHSimpleTest_Log_NE.sendCommand(ON)
        start_a_ch_CHSimpleTest_Log_NE.sendCommand(OFF)
        start_p_ch_CHSimpleTest_Log_NE.sendCommand(OFF)
        start_e_ch_CHSimpleTest_Log_NE.sendCommand(OFF)
    |]
end

rule "Monitor_m_ch_CHSimpleTest_Log_NE"
when
    Item start_m_ch_CHSimpleTest_Log_NE received command ON
then
    sendcommand(start_m_ch_CHSimpleTest_Log_NE, OFF)

    counter_ch_CHSimpleTest_Log_NE = counter_ch_CHSimpleTest_Log_NE + 1
    logInfo("CHSimpleTest_Log_NE.rules", "Monitor for group (ch_CHSimpleTest_Log_NE) active.")
    logInfo("CHSimpleTest_Log_NE.rules", "counter_ch_CHSimpleTest_Log_NE = " + counter_ch_CHSimpleTest_Log_NE + ".")

    sendcommand(start_a_ch_CHSimpleTest_Log_NE, ON)
end

rule "Analyze_a_ch_CHSimpleTest_Log_NE"
when
    Item start_a_ch_CHSimpleTest_Log_NE received command ON
then
    sendcommand(start_a_ch_CHSimpleTest_Log_NE, OFF)

    counter_ch_CHSimpleTest_Log_NE = counter_ch_CHSimpleTest_Log_NE + 1
    logInfo("CHSimpleTest_Log_NE.rules", "Analyze for group (ch_CHSimpleTest_Log_NE) active.")
    logInfo("CHSimpleTest_Log_NE.rules", "counter_ch_CHSimpleTest_Log_NE = " + counter_ch_CHSimpleTest_Log_NE + ".")

    if(((Math::random * 100.0).intValue + 1) <= 50 ){
        adaptation_required_a_ch = true
    }
    else {
        adaptation_required_a_ch = false
    }

    if(adaptation_required_a_ch){
        logInfo("CHSimpleTest_Log_NE.rules", "Adaptation required for CHSimpleTest_Log_NE.")
        logInfo("CHSimpleTest_Log_NE.rules", "Proceeding with loop.")

        sendcommand(start_p_ch_CHSimpleTest_Log_NE, ON)
    }
    else {
        logInfo("CHSimpleTest_Log_NE.rules", "Adaptation not required for CHSimpleTest_Log_NE.")
        counter_ch_CHSimpleTest_Log_NE = 0
        logInfo("CHSimpleTest_Log_NE.rules", "Resetting loop.")

        sendcommand(start_m_ch_CHSimpleTest_Log_NE, ON)
    }
end

rule "Plan_p_ch_CHSimpleTest_Log_NE"
when
    Item start_p_ch_CHSimpleTest_Log_NE received command ON
then
    sendcommand(start_p_ch_CHSimpleTest_Log_NE, OFF)

    counter_ch_CHSimpleTest_Log_NE = counter_ch_CHSimpleTest_Log_NE + 1
    logInfo("CHSimpleTest_Log_NE.rules", "Plan for group (ch_CHSimpleTest_Log_NE) active.")
    logInfo("CHSimpleTest_Log_NE.rules", "counter_ch_CHSimpleTest_Log_NE = " + counter_ch_CHSimpleTest_Log_NE + ".")

    sendcommand(start_e_ch_CHSimpleTest_Log_NE, ON)
end

rule "Execute_e_ch_CHSimpleTest_Log_NE"
when
    Item start_e_ch_CHSimpleTest_Log_NE received command ON
then
    sendcommand(start_e_ch_CHSimpleTest_Log_NE, OFF)

    counter_ch_CHSimpleTest_Log_NE = counter_ch_CHSimpleTest_Log_NE + 1
    logInfo("CHSimpleTest_Log_NE.rules", "Execute for group (ch_CHSimpleTest_Log_NE) active.")
    logInfo("CHSimpleTest_Log_NE.rules", "counter_ch_CHSimpleTest_Log_NE = " + counter_ch_CHSimpleTest_Log_NE + ".")
    counter_ch_CHSimpleTest_Log_NE = 0

    sendcommand(start_m_ch_CHSimpleTest_Log_NE, ON)
end

