var boolean adaptation_required_a_ch


rule "StartLoop_CHSimpleTest"
when
    System started
then
    adaptation_required_a_ch = false

    //createTimer(now.plusSeconds(1)) [|
        start_m_ch_CHSimpleTest.sendCommand(ON)
        start_a_ch_CHSimpleTest.sendCommand(OFF)
        start_p_ch_CHSimpleTest.sendCommand(OFF)
        start_e_ch_CHSimpleTest.sendCommand(OFF)
    //|]
end

rule "Monitor_m_ch_CHSimpleTest"
when
    Item start_m_ch_CHSimpleTest received command ON
then
    sendCommand(start_m_ch_CHSimpleTest, OFF)

    sendCommand(start_a_ch_CHSimpleTest, ON)
end

rule "Analyze_a_ch_CHSimpleTest"
when
    Item start_a_ch_CHSimpleTest received command ON
then
    sendCommand(start_a_ch_CHSimpleTest, OFF)

    if(((Math::random * 100.0).intValue + 1) <= 50 ){
        adaptation_required_a_ch = true
    }
    else {
        adaptation_required_a_ch = false
    }

    if(adaptation_required_a_ch){
        sendCommand(start_p_ch_CHSimpleTest, ON)
    }
    else {
        sendCommand(start_m_ch_CHSimpleTest, ON)
    }
end

rule "Plan_p_ch_CHSimpleTest"
when
    Item start_p_ch_CHSimpleTest received command ON
then
    sendCommand(start_p_ch_CHSimpleTest, OFF)

    sendCommand(start_e_ch_CHSimpleTest, ON)
end

rule "Execute_e_ch_CHSimpleTest"
when
    Item start_e_ch_CHSimpleTest received command ON
then
    sendCommand(start_e_ch_CHSimpleTest, OFF)

    sendCommand(start_m_ch_CHSimpleTest, ON)
end

