var boolean adaptation_required_a_ch

var Number counter_ch_CHAggregateTest_Log_NE
var Number counter_h0_CHAggregateTest_Log_NE
var Number counter_h1_CHAggregateTest_Log_NE

rule "StartLoop_CHAggregateTest_Log_NE"
when
    System started
then
    logInfo("CHAggregateTest_Log_NE.rules", "Initializing loops for CHAggregateTest_Log_NE.")

    logInfo("CHAggregateTest_Log_NE.rules", "Starting MAPE Loop for groups (ch_CHAggregateTest_Log_NE), (h0_CHAggregateTest_Log_NE) and (h1_CHAggregateTest_Log_NE).")
    counter_ch_CHAggregateTest_Log_NE = 0
    logInfo("CHAggregateTest_Log_NE.rules", "counter_ch_CHAggregateTest_Log_NE = " + counter_ch_CHAggregateTest_Log_NE + ".")
    counter_h0_CHAggregateTest_Log_NE = 0
    logInfo("CHAggregateTest_Log_NE.rules", "counter_h0_CHAggregateTest_Log_NE = " + counter_h0_CHAggregateTest_Log_NE + ".")
    counter_h1_CHAggregateTest_Log_NE = 0
    logInfo("CHAggregateTest_Log_NE.rules", "counter_h1_CHAggregateTest_Log_NE = " + counter_h1_CHAggregateTest_Log_NE + ".")

    adaptation_required_a_ch = false

    createTimer(now.plusSeconds(1)) [|
        start_m_ch_CHAggregateTest_Log_NE.sendCommand(OFF)
        start_a_ch_CHAggregateTest_Log_NE.sendCommand(OFF)
        start_p_ch_CHAggregateTest_Log_NE.sendCommand(OFF)
        start_e_ch_CHAggregateTest_Log_NE.sendCommand(OFF)
        start_m_h0_CHAggregateTest_Log_NE.sendCommand(ON)
        start_e_h0_CHAggregateTest_Log_NE.sendCommand(OFF)
        start_m_h1_CHAggregateTest_Log_NE.sendCommand(ON)
        start_e_h1_CHAggregateTest_Log_NE.sendCommand(OFF)
    |]
end

rule "Monitor_m_ch_CHAggregateTest_Log_NE"
when
    Item start_m_ch_CHAggregateTest_Log_NE received command ON
then
    sendcommand(start_m_ch_CHAggregateTest_Log_NE, OFF)

    counter_ch_CHAggregateTest_Log_NE = counter_ch_CHAggregateTest_Log_NE + 1
    logInfo("CHAggregateTest_Log_NE.rules", "Monitor for group (ch_CHAggregateTest_Log_NE) active.")
    logInfo("CHAggregateTest_Log_NE.rules", "counter_ch_CHAggregateTest_Log_NE = " + counter_ch_CHAggregateTest_Log_NE + ".")

    sendcommand(start_a_ch_CHAggregateTest_Log_NE, ON)
end

rule "Analyze_a_ch_CHAggregateTest_Log_NE"
when
    Item start_a_ch_CHAggregateTest_Log_NE received command ON
then
    sendcommand(start_a_ch_CHAggregateTest_Log_NE, OFF)

    counter_ch_CHAggregateTest_Log_NE = counter_ch_CHAggregateTest_Log_NE + 1
    logInfo("CHAggregateTest_Log_NE.rules", "Analyze for group (ch_CHAggregateTest_Log_NE) active.")
    logInfo("CHAggregateTest_Log_NE.rules", "counter_ch_CHAggregateTest_Log_NE = " + counter_ch_CHAggregateTest_Log_NE + ".")

    if(((Math::random * 100.0).intValue + 1) <= 50 ){
        adaptation_required_a_ch = true
    }
    else {
        adaptation_required_a_ch = false
    }

    if(adaptation_required_a_ch){
        logInfo("CHAggregateTest_Log_NE.rules", "Adaptation required for CHAggregateTest_Log_NE.")
        logInfo("CHAggregateTest_Log_NE.rules", "Proceeding with loop.")

        sendcommand(start_p_ch_CHAggregateTest_Log_NE, ON)
    }
    else {
        logInfo("CHAggregateTest_Log_NE.rules", "Adaptation not required for CHAggregateTest_Log_NE.")
        counter_ch_CHAggregateTest_Log_NE = 0
        logInfo("CHAggregateTest_Log_NE.rules", "Resetting loop.")

        sendcommand(start_m_h0_CHAggregateTest_Log_NE, ON)
        sendcommand(start_m_h1_CHAggregateTest_Log_NE, ON)
    }
end

rule "Plan_p_ch_CHAggregateTest_Log_NE"
when
    Item start_p_ch_CHAggregateTest_Log_NE received command ON
then
    sendcommand(start_p_ch_CHAggregateTest_Log_NE, OFF)

    counter_ch_CHAggregateTest_Log_NE = counter_ch_CHAggregateTest_Log_NE + 1
    logInfo("CHAggregateTest_Log_NE.rules", "Plan for group (ch_CHAggregateTest_Log_NE) active.")
    logInfo("CHAggregateTest_Log_NE.rules", "counter_ch_CHAggregateTest_Log_NE = " + counter_ch_CHAggregateTest_Log_NE + ".")

    sendcommand(start_e_ch_CHAggregateTest_Log_NE, ON)
end

rule "Execute_e_ch_CHAggregateTest_Log_NE"
when
    Item start_e_ch_CHAggregateTest_Log_NE received command ON
then
    sendcommand(start_e_ch_CHAggregateTest_Log_NE, OFF)

    counter_ch_CHAggregateTest_Log_NE = counter_ch_CHAggregateTest_Log_NE + 1
    logInfo("CHAggregateTest_Log_NE.rules", "Execute for group (ch_CHAggregateTest_Log_NE) active.")
    logInfo("CHAggregateTest_Log_NE.rules", "counter_ch_CHAggregateTest_Log_NE = " + counter_ch_CHAggregateTest_Log_NE + ".")
    counter_ch_CHAggregateTest_Log_NE = 0

    sendcommand(start_e_h0_CHAggregateTest_Log_NE, ON)
    sendcommand(start_e_h1_CHAggregateTest_Log_NE, ON)
end

rule "Monitor_m_h0_CHAggregateTest_Log_NE"
when
    Item start_m_h0_CHAggregateTest_Log_NE received command ON
then
    sendcommand(start_m_h0_CHAggregateTest_Log_NE, OFF)

    counter_h0_CHAggregateTest_Log_NE = counter_h0_CHAggregateTest_Log_NE + 1
    logInfo("CHAggregateTest_Log_NE.rules", "Monitor for group (h0_CHAggregateTest_Log_NE) active.")
    logInfo("CHAggregateTest_Log_NE.rules", "counter_h0_CHAggregateTest_Log_NE = " + counter_h0_CHAggregateTest_Log_NE + ".")

    sendcommand(start_h0_to_ch_CHAggregateTest_Log_NE, ON)
end

rule "Execute_e_h0_CHAggregateTest_Log_NE"
when
    Item start_e_h0_CHAggregateTest_Log_NE received command ON
then
    sendcommand(start_e_h0_CHAggregateTest_Log_NE, OFF)

    counter_h0_CHAggregateTest_Log_NE = counter_h0_CHAggregateTest_Log_NE + 1
    logInfo("CHAggregateTest_Log_NE.rules", "Execute for group (h0_CHAggregateTest_Log_NE) active.")
    logInfo("CHAggregateTest_Log_NE.rules", "counter_h0_CHAggregateTest_Log_NE = " + counter_h0_CHAggregateTest_Log_NE + ".")
    counter_h0_CHAggregateTest_Log_NE = 0

    sendcommand(start_m_h0_CHAggregateTest_Log_NE, ON)
end

rule "Monitor_m_h1_CHAggregateTest_Log_NE"
when
    Item start_m_h1_CHAggregateTest_Log_NE received command ON
then
    sendcommand(start_m_h1_CHAggregateTest_Log_NE, OFF)

    counter_h1_CHAggregateTest_Log_NE = counter_h1_CHAggregateTest_Log_NE + 1
    logInfo("CHAggregateTest_Log_NE.rules", "Monitor for group (h1_CHAggregateTest_Log_NE) active.")
    logInfo("CHAggregateTest_Log_NE.rules", "counter_h1_CHAggregateTest_Log_NE = " + counter_h1_CHAggregateTest_Log_NE + ".")

    sendcommand(start_h1_to_ch_CHAggregateTest_Log_NE, ON)
end

rule "Execute_e_h1_CHAggregateTest_Log_NE"
when
    Item start_e_h1_CHAggregateTest_Log_NE received command ON
then
    sendcommand(start_e_h1_CHAggregateTest_Log_NE, OFF)

    counter_h1_CHAggregateTest_Log_NE = counter_h1_CHAggregateTest_Log_NE + 1
    logInfo("CHAggregateTest_Log_NE.rules", "Execute for group (h1_CHAggregateTest_Log_NE) active.")
    logInfo("CHAggregateTest_Log_NE.rules", "counter_h1_CHAggregateTest_Log_NE = " + counter_h1_CHAggregateTest_Log_NE + ".")
    counter_h1_CHAggregateTest_Log_NE = 0

    sendcommand(start_m_h1_CHAggregateTest_Log_NE, ON)
end

rule "Aggregate_h0h1_to_ch_CHAggregateTest_Log_NE"
when
    Item h0h1_to_ch_CHAggregateTest_Log_NE received update ON
then
    logInfo("CHAggregateTest_Log_NE.rules", "Aggregating output from start_m_h0_CHAggregateTest_Log_NE and start_m_h1_CHAggregateTest_Log_NE to start_m_ch_CHAggregateTest_Log_NE.")

    counter_h0_CHAggregateTest_Log_NE = counter_h0_CHAggregateTest_Log_NE + 1
    logInfo("CHAggregateTest_Log_NE.rules", "counter_h0_CHAggregateTest_Log_NE = " + counter_h0_CHAggregateTest_Log_NE + ".")

    counter_h1_CHAggregateTest_Log_NE = counter_h1_CHAggregateTest_Log_NE + 1
    logInfo("CHAggregateTest_Log_NE.rules", "counter_h1_CHAggregateTest_Log_NE = " + counter_h1_CHAggregateTest_Log_NE + ".")

    sendcommand(start_h0_to_ch_CHAggregateTest_Log_NE, OFF)
    sendcommand(start_h1_to_ch_CHAggregateTest_Log_NE, OFF)

    sendcommand(start_m_ch_CHAggregateTest_Log_NE, ON)
end

